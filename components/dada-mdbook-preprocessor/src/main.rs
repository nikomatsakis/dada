use anyhow::Result;
use clap::{Arg, ArgMatches, Command};
use mdbook::book::{Book, BookItem};
use mdbook::preprocess::{CmdPreprocessor, Preprocessor, PreprocessorContext};
use regex::Regex;
use std::io;
use std::process;

pub fn make_app() -> Command<'static> {
    Command::new("dada-mdbook-preprocessor")
        .about("An mdbook preprocessor for processing Dada r[...] labels")
        .subcommand(
            Command::new("supports")
                .arg(Arg::new("renderer").required(true))
                .about("Check whether a renderer is supported by this preprocessor"),
        )
}

fn main() {
    let matches = make_app().get_matches();

    let preprocessor = DadaPreprocessor::new();

    if let Some(sub_args) = matches.subcommand_matches("supports") {
        handle_supports(&preprocessor, sub_args);
    } else if let Err(e) = handle_preprocessing(&preprocessor) {
        eprintln!("{}", e);
        process::exit(1);
    }
}

fn handle_supports(pre: &dyn Preprocessor, sub_args: &ArgMatches) -> ! {
    let renderer = sub_args.value_of("renderer").expect("Required argument");
    let supported = pre.supports_renderer(renderer);

    if supported {
        process::exit(0);
    } else {
        process::exit(1);
    }
}

fn handle_preprocessing(pre: &dyn Preprocessor) -> Result<()> {
    let (mut ctx, book) = CmdPreprocessor::parse_input(io::stdin())?;

    let book_version = Version::parse(&ctx.mdbook_version)?;
    let version_req = VersionReq::parse(mdbook::MDBOOK_VERSION)?;

    if !version_req.matches(&book_version) {
        eprintln!(
            "Warning: The {} plugin was built against version {} of mdbook, \
             but we're being called from version {}",
            pre.name(),
            mdbook::MDBOOK_VERSION,
            ctx.mdbook_version
        );
    }

    let processed_book = pre.run(&mut ctx, book)?;
    serde_json::to_writer(io::stdout(), &processed_book)?;

    Ok(())
}

use semver::{Version, VersionReq};

struct DadaPreprocessor;

impl DadaPreprocessor {
    pub fn new() -> DadaPreprocessor {
        DadaPreprocessor
    }
}

impl Preprocessor for DadaPreprocessor {
    fn name(&self) -> &str {
        "dada-mdbook-preprocessor"
    }

    fn run(&self, _ctx: &PreprocessorContext, mut book: Book) -> Result<Book> {
        let re = Regex::new(r"^r\[([^\]]+)\]$").unwrap();
        
        book.for_each_mut(|item: &mut BookItem| {
            if let BookItem::Chapter(chapter) = item {
                // Check if this chapter has any labels
                let has_labels = chapter.content.lines().any(|line| re.is_match(line.trim()));
                
                // Process the content
                chapter.content = process_r_labels(&chapter.content);
                
                // If this chapter has labels, inject CSS at the end
                if has_labels {
                    chapter.content.push_str("\n");
                    chapter.content.push_str(&get_inline_css());
                }
            }
        });

        Ok(book)
    }

    fn supports_renderer(&self, renderer: &str) -> bool {
        renderer != "not-supported"
    }
}

fn process_r_labels(content: &str) -> String {
    let re = Regex::new(r"^r\[([^\]]+)\]$").unwrap();
    
    content
        .lines()
        .map(|line| {
            if let Some(captures) = re.captures(line.trim()) {
                let label = &captures[1];
                // Convert to HTML with anchor and styling
                format!(
                    "<div class=\"spec-label\"><a id=\"{}\" href=\"#{}\" class=\"spec-label-link\">r[{}]</a></div>",
                    label, label, label
                )
            } else {
                line.to_string()
            }
        })
        .collect::<Vec<_>>()
        .join("\n")
}

fn get_inline_css() -> String {
    r#"<style>
/* Generated by dada-mdbook-preprocessor - Styling for specification paragraph labels */
.spec-label {
    margin-bottom: 0.25rem;
}

.spec-label-link {
    font-size: 0.75rem;
    color: #666;
    text-decoration: none;
    font-family: 'SFMono-Regular', 'Monaco', 'Inconsolata', 'Fira Code', 'Source Code Pro', monospace;
    background-color: #f6f8fa;
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    border: 1px solid #e1e8ed;
}

.spec-label-link:hover {
    color: #0366d6;
    background-color: #f1f8ff;
    border-color: #c8e1ff;
    text-decoration: none;
}

/* Dark theme support */
.navy .spec-label-link {
    color: #c5c5c5;
    background-color: #1e1e1e;
    border-color: #404040;
}

.navy .spec-label-link:hover {
    color: #79b8ff;
    background-color: #1c2128;
    border-color: #30363d;
}
</style>"#.to_string()
}